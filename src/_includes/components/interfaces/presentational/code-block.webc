<section class="codeBlock flow__grid">
  <nav class="flow__inline flow__align--block-stretch flow__align--inline-stretch">
    <label webc:for="(item, index) of ['Demo', 'HTML', 'CSS', 'JS']"
      class="border__left border__top border__right radius__tl--xs radius__tr--xs" for="demo">
      <input type="radio" :id="item.toLowerCase()" name="demo" :value="item" :checked="index === 0">
      <span
        class="color__type--base--mid flow__inline flow__align--block-center flow__align--inline-center padding__inline--m type__family--tertiary type__size--s-m"
        @text="item"></span>
    </label>
  </nav>
  <section class="content__holder flow__grid">
    <slot></slot>
    <button class="copyButton button__secondary color__type--base--mid" onclick="copyCode()">
      <icon name="copy" web:nokeep></icon>
    </button>
  </section>
</section>

<script>
  const copyCode = () => {
    const codeBlock = document.querySelector('.codeBlock');
    const checkedInput = codeBlock.querySelector('input:checked');
    const copyButton = codeBlock.querySelector('.copyButton');
    const preLookup = () => {
      if (checkedInput.getAttribute('id') === 'html') {
        return codeBlock.querySelector('.language-html')?.textContent;
      }
      if (checkedInput.getAttribute('id') === 'css') {
        return codeBlock.querySelector('.language-css')?.textContent;
      }
      if (checkedInput.getAttribute('id') === 'js') {
        return codeBlock.querySelector('.language-js')?.textContent;
      }
      return null;
    }
    if (preLookup()) {
      navigator.clipboard.writeText(preLookup());
      copyButton.classList.toggle('copied');

      setTimeout(() => {
        copyButton.classList.toggle('copied');
      }, 375);
    }
  }
</script>

<style>
  .codeBlock {

    justify-items: center;

    >* {
      min-inline-size: 0;
      inline-size: 100%;
    }

    &:has(#html:checked),
    &:has(#css:checked),
    &:has(#js:checked) {
      >section>figure {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
      }
    }

    pre {
      border-top-left-radius: 0;
      border-top-right-radius: 0;
      display: none;
    }

    &:has(#html:checked, #css:checked, #js:checked) {
      .content__holder>button {
        display: inline-flex;
      }
    }

    &:has(#html:checked) {
      pre.language-html {
        display: block;
      }
    }

    &:has(#css:checked) {
      pre.language-css {
        display: block;
      }
    }

    &:has(#js:checked) {
      pre.language-js {
        display: block;
      }
    }

    .content__holder {
      >* {
        min-inline-size: 0;
      }

      >pre {
        grid-column: 1;
        grid-row: 2;
      }

      >button {
        --control__padding--block: 0;
        --control__padding--inline: 0;
        --header__offset: 108px;
        block-size: var(--size__l);
        display: none;
        grid-column: 1;
        grid-row: 2;
        justify-self: end;
        inline-size: var(--size__l);
        inset-block-start: calc(var(--header__offset) + var(--size__s));
        margin-block-start: var(--size__s);
        margin-inline-end: var(--size__s);
        order: 1;
        position: sticky;

        @media (min-width: 640px) {
          --header__offset: 76px;
        }

        &.copied {
          animation: emphasize 0.375s linear infinite;
          animation-fill-mode: both;
          animation-direction: alternate-reverse;
        }

        &:focus,
        &:hover {
          color: var(--color__base);
        }
      }
    }

    >nav {
      inline-size: auto;

      label {
        align-items: stretch;
        block-size: var(--size__l);
        border-color: transparent;
        display: grid;
        justify-items: stretch;
        position: relative;

        >* {
          grid-area: 1/1;
        }

        input {
          --outline__offset: calc(var(--size__xs) * -1);
          appearance: none;
          block-size: 100%;
          cursor: pointer;
          inline-size: 100%;
          opacity: 0;
          position: relative;
          z-index: 2;
        }

        &:has(input:checked) {
          border-color: var(--color__base--light);

          span {
            color: var(--color__base);
          }

          &:before {
            --size: var(--size__xxs);
            background-color: var(--color__contrast);
            block-size: var(--size);
            content: '';
            display: block;
            inset-block-end: calc(var(--size) * -1);
            inset-inline: 0;
            position: absolute;
          }
        }
      }
    }
  }

  @keyframes emphasize {
    to {
      scale: 1.0625;
    }
  }
</style>